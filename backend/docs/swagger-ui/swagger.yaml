swagger: "2.0"
info:
  title: "MMS-Team-7"
  description: "
  Mentors Management system is a people management app that enables proper. 
  coordination of mentors needed to execute projects, ranging from recruitment to 
  off-boarding. Ensue to go through the app doc below to read more and follow all the instructions."
  version: "1.0.0"
host: "mms-team-7.onrender.com"
basePath: "/api/v1"
schemes:
  - "https"
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /users/:id/change_password:
    patch:
      summary: "Changer user's password"
      parameters:
        - name: "id"
          in: path
          description: "ID of the user"
          required: true
          type: string
        - name: "passwords"
          in: "body"
          description: "Current password and new password of the user to update"
          required: true
          schema:
            $ref: "#/definitions/ChangePasswordRequest"
      responses:
        200: 
          description: "OK"
          schema:
            type: object
            properties:
              result:
                type: string
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /forgot_password:
    post:
      summary: "Request for password reset"
      parameters:
        - name: "email"
          in: "body"
          description: "User's email to send reset password email/token"
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              result:
                type: string
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users/:id:
    patch:
      summary: "Update user's profile info"
      parameters:
        - name: "User's info"
          in: "body"
          description: "Update user's profile data"
          required: true
          schema:
            $ref: "#/definitions/UpdateUserResquest"
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  user:
                    $ref: "#/definitions/User"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /auth/login:
    post:
      summary: "Login a user"
      parameters:
        - name: "credentials"
          in: "body"
          description: "Email address and password of the user to authenticate"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/logout:
    post:
      summary: "Logout a user"
      responses:
        200:
          description: "OK"
          schema:
            type: object
            properties:
              result:
                type: string
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /auth/google/login:
    get:
      summary: "Initiate Google Sign-In"
      description: "Initiate Google Sign-In flow by redirecting the user to Google authorization endpoint"
      responses:
        307:
          description: "Temporary Redirect"
          headers:
            Location:
              description: "URL to redirect the user to Google authorization endpoint"
              schema:
                type: "string"
                example: "https://accounts.google.com/o/oauth2/auth"

  /auth/google/callback:
    get:
      summary: "Google sign-in callback"
      parameters:
        - name: code
          in: query
          required: true
          description: "The authorization code returned by Google after the user approves access"
        - name: state
          in: query
          required: true
          description: "A value passed by the client which is returned unchanged in the response"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /faqs:
    post:
      summary: "Create FAQ"
      parameters:
        - name: "FAQ"
          in: "body"
          description: "Details of FAQ to create"
          required: true
          schema:
            $ref: "#/definitions/CreateFAQRequest"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/CreateFAQResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    get:
      summary: "Get all FAQs"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/GetFAQsResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"

  /discussions:
    post:
      summary: "Create a discussion forum"
      parameters:
        - name: "title and content"
          in: body
          description: "Title and content of the discussion"
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Discussion"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []
    get:
      summary: "List all discussions for a user"
      parameters:
        - name: "page_id"
          in: query
          description: "What page to start from"
          required: true
          type: integer
        - name: "page_size"
          in: query
          description: "What page size to return"
          required: true
          type: integer
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: "#/definitions/Discussion"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /discussions/:id:
    patch:
      summary: "Update a discussion"
      parameters:
        - name: "id"
          in: path
          description: "Discussion ID to update"
          required: true
          type: string
        - name: "title and content"
          in: body
          description: "The discussion new title and content"
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Discussion"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

  /discussions/:id/add_comment:
    post:
      summary: "Add a comment on discussion"
      parameters:
        - name: "id"
          in: path
          description: "Discussion ID to add comment"
          required: true
          type: string
        - name: "comment"
          in: body
          description: "Content of the comment and owner's full name "
          required: true
          schema:
            type: object
            properties:
              first_name:
                type: string
              last_name:
                type: string
              content:
                type: string
      responses:
        201:
          description: "Created"
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - Bearer: []

definitions:
  ChangePasswordRequest:
    type: object
    properties:
      current_password:
        type: string
      new_password:
        type: string
      confirm_password:
        type: string

  LoginRequest:
    type: object
    properties:
      email:
        type: string
        format: email
      password:
        type: string

  LoginResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          token:
            type: string
          payload:
            type: object
            properties:
              id:
                type: string
                format: uuid
              user_id:
                type: string
              user_role:
                type: string
              issued_at:
                type: string
                format: date-time
              expired_at:
                type: string
                format: date-time
          user:
            $ref: "#/definitions/User"
              
  FAQ:
    type: object
    properties:
      question:
        type: string
      answer:
        type: string
      category:
        type: string

  CreateFAQRequest:
    $ref: "#/definitions/FAQ"

  CreateFAQResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: string
          question:
            type: string
          answer:
            type: string
          category:
            type: string

  GetFAQsResponse:
    type: object
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/FAQ"
  
  UpdateUserResquest:
    type: object
    properties:
      first_name:
        type: string
      last_name:
        type: string
      about:
        type: string
      website:
        type: string
      profile_image_url:
        type: string
      country:
        type: string
      city:
        type: string
      github_url:
        type: string
      linkedin_url:
        type: string
      twitter_url:
        type: string
      instagram_url:
        type: string
  
  User:
    type: object
    properties:
      id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      role:
        type: string
      about:
        type: string
      contact:
        $ref: "#/definitions/Contact"
      created_at:
        type: string
        format: date-time
      profile_image_url:
        type: string
      password_changed_at:
        type: string
        format: date-time
      socials:
        $ref: "#/definitions/Socials"
      is_email_verified:
        type: boolean

  Contact:
    type: object
    properties:
      email:
        type: string
        format: email
      website:
        type: string
      country:
        type: string
      city:
        type: string

  Socials:
    type: object
    properties:
      github_url:
        type: object
        properties:
          value:
            type: string
          is_visible:
            type: string
      linkedin_url:
        type: object
        properties:
          value:
            type: string
          is_visible:
            type: string
      twitter_url:
        type: object
        properties:
          value:
            type: string
          is_visible:
            type: string
      instagram_url:
        type: object
        properties:
          value:
            type: string
          is_visible:
            type: string

  Discussion:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      content:
        type: string
      created_at:
        type: string
        format: date-time
      owner_id:
        type: string
      comments:
        type: array
        items:
          $ref: "#/definitions/Comment"

  Comment:
    type: object
    properties:
      owner_id:
        type: string
      full_name:
        type: string
      content:
        type: string
      created_at:
        type: string
        format: date-time

  ErrorResponse:
    type: object
    properties:
      error:
        type: "string"
